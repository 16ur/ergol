// Project page  : https://github.com/Nuclear-Squid/ergol
// Author        : Fabien Cazenave
// Version       : 0.99.2
// Last change   : 2023-12-31
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French (Ergo-L)
//
// Base layer + dead key
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ ~   │ ! ¡ │ @ ‘ │ # ’ │ $ ¢ │ % ‰ │ ^   │ &   │ *   │ «   │ »   │ _ – │ + ± ┃          ┃
// │ `   │ 1 „ │ 2 “ │ 3 ” │ 4 £ │ 5 € │ 6 ¥ │ 7 ¤ │ 8 § │ 9 ¶ │ 0 ° │ / ÷ │ = ≠ ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃ Q   │ C   │ O   │ P   │ W   │ J   │ M   │ D   │**   │ F   │ {   │ }   ┃       ┃
// ┃ ↹      ┃   â │   ç │   œ │   ô │     │     │   µ │   _ │***¨ │   ŭ │ [   │ ]   ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃ A   │ S   │ E   │ N   │ ; • │ L   │ R   │ T   │ I   │ U   │ "   │ |   ┃      ┃
// ┃ ⇬       ┃   à │   é │   è │   ê │ , · │     │     │   î │   û │   ù │ '   │ \   ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃ >   │ Z   │ X   │ ? ¿ │ V   │ B   │ :   │ H   │ G   │ Y   │ K   ┃               ┃
// ┃ ⇧    ┃ <   │   æ │   ß │ - — │   ñ │     │ . … │     │     │     │     ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
// AltGr layer
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │     │   ¹ │   ² │   ³ │   ⁴ │   ⁵ │   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ │     │     ┃          ┃
// │     │   ₁ │   ₂ │   ₃ │   ₄ │   ₅ │   ₆ │   ₇ │   ₈ │   ₉ │   ₀ │     │     ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━━━━━━┫
// ┃        ┃     │     │     │  *¤ │   ‰ │  *^ │  *µ │   × │  *´ │  *` │     │     ┃       ┃
// ┃ ↹      ┃   @ │   < │   > │   $ │   % │   ^ │   & │   * │   ' │   ` │     │     ┃       ┃
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓  ⏎   ┃
// ┃         ┃     │   ⁽ │   ⁾ │     │   ≠ │  */ │   ± │   — │   ÷ │  *¨ │     │     ┃      ┃
// ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   " │     │     ┃      ┃
// ┣━━━━━━┳━━┹──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┷━━━━━┻━━━━━━┫
// ┃      ┃     │  *~ │     │     │   – │     │     │   ¬ │  *¸ │     │     ┃               ┃
// ┃ ⇧    ┃     │   ~ │   [ │   ] │   _ │   # │   | │   ! │   ; │   : │   ? ┃ ⇧             ┃
// ┣━━━━━━┻┳━━━━┷━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ AltGr ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "ergol" {
    name[group1]= "French (Ergo-L)";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , U201E           , exclamdown      , U2081           , onesuperior     , VoidSymbol      , VoidSymbol      ]}; // 1 ! „ ¡ ₁ ¹
    key <AE02> {[ 2               , at              , U201C           , U2018           , U2082           , twosuperior     , VoidSymbol      , VoidSymbol      ]}; // 2 @ “ ‘ ₂ ²
    key <AE03> {[ 3               , numbersign      , U201D           , U2019           , U2083           , threesuperior   , VoidSymbol      , VoidSymbol      ]}; // 3 # ” ’ ₃ ³
    key <AE04> {[ 4               , dollar          , sterling        , cent            , U2084           , U2074           , VoidSymbol      , VoidSymbol      ]}; // 4 $ £ ¢ ₄ ⁴
    key <AE05> {[ 5               , percent         , EuroSign        , U2030           , U2085           , U2075           , VoidSymbol      , VoidSymbol      ]}; // 5 % € ‰ ₅ ⁵
    key <AE06> {[ 6               , asciicircum     , yen             , VoidSymbol      , U2086           , U2076           , VoidSymbol      , VoidSymbol      ]}; // 6 ^ ¥   ₆ ⁶
    key <AE07> {[ 7               , ampersand       , currency        , VoidSymbol      , U2087           , U2077           , VoidSymbol      , VoidSymbol      ]}; // 7 & ¤   ₇ ⁷
    key <AE08> {[ 8               , asterisk        , section         , VoidSymbol      , U2088           , U2078           , VoidSymbol      , VoidSymbol      ]}; // 8 * §   ₈ ⁸
    key <AE09> {[ 9               , guillemotleft   , paragraph       , VoidSymbol      , U2089           , U2079           , VoidSymbol      , VoidSymbol      ]}; // 9 « ¶   ₉ ⁹
    key <AE10> {[ 0               , guillemotright  , degree          , VoidSymbol      , U2080           , U2070           , VoidSymbol      , VoidSymbol      ]}; // 0 » °   ₀ ⁰

    // Letters, first row
    key <AD01> {[ q               , Q               , acircumflex     , Acircumflex     , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // q Q â Â @
    key <AD02> {[ c               , C               , ccedilla        , Ccedilla        , less            , lessthanequal   , VoidSymbol      , VoidSymbol      ]}; // c C ç Ç < ≤
    key <AD03> {[ o               , O               , oe              , OE              , greater         , greaterthanequal, VoidSymbol      , VoidSymbol      ]}; // o O œ Œ > ≥
    key <AD04> {[ p               , P               , ocircumflex     , Ocircumflex     , dollar          , dead_currency   , VoidSymbol      , VoidSymbol      ]}; // p P ô Ô $ ¤
    key <AD05> {[ w               , W               , VoidSymbol      , VoidSymbol      , percent         , U2030           , VoidSymbol      , VoidSymbol      ]}; // w W     % ‰
    key <AD06> {[ j               , J               , VoidSymbol      , VoidSymbol      , asciicircum     , dead_circumflex , VoidSymbol      , VoidSymbol      ]}; // j J     ^ ^
    key <AD07> {[ m               , M               , mu              , VoidSymbol      , ampersand       , dead_greek      , VoidSymbol      , VoidSymbol      ]}; // m M µ   & µ
    key <AD08> {[ d               , D               , underscore      , VoidSymbol      , asterisk        , multiply        , VoidSymbol      , VoidSymbol      ]}; // d D _   * ×
    key <AD09> {[ ISO_Level3_Latch, ISO_Level3_Latch, dead_diaeresis  , VoidSymbol      , apostrophe      , dead_acute      , VoidSymbol      , VoidSymbol      ]}; // *¨ *¨ ¨   ' ´
    key <AD10> {[ f               , F               , ubreve          , Ubreve          , grave           , dead_grave      , VoidSymbol      , VoidSymbol      ]}; // f F ŭ Ŭ ` `

    // Letters, second row
    key <AC01> {[ a               , A               , agrave          , Agrave          , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // a A à À {
    key <AC02> {[ s               , S               , eacute          , Eacute          , parenleft       , U207D           , VoidSymbol      , VoidSymbol      ]}; // s S é É ( ⁽
    key <AC03> {[ e               , E               , egrave          , Egrave          , parenright      , U207E           , VoidSymbol      , VoidSymbol      ]}; // e E è È ) ⁾
    key <AC04> {[ n               , N               , ecircumflex     , Ecircumflex     , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // n N ê Ê }
    key <AC05> {[ comma           , semicolon       , periodcentered  , U2022           , equal           , notequal        , VoidSymbol      , VoidSymbol      ]}; // , ; · • = ≠
    key <AC06> {[ l               , L               , VoidSymbol      , VoidSymbol      , backslash       , dead_stroke     , VoidSymbol      , VoidSymbol      ]}; // l L     \ /
    key <AC07> {[ r               , R               , VoidSymbol      , VoidSymbol      , plus            , plusminus       , VoidSymbol      , VoidSymbol      ]}; // r R     + ±
    key <AC08> {[ t               , T               , icircumflex     , Icircumflex     , minus           , emdash          , VoidSymbol      , VoidSymbol      ]}; // t T î Î - —
    key <AC09> {[ i               , I               , ucircumflex     , Ucircumflex     , slash           , division        , VoidSymbol      , VoidSymbol      ]}; // i I û Û / ÷
    key <AC10> {[ u               , U               , ugrave          , Ugrave          , quotedbl        , dead_diaeresis  , VoidSymbol      , VoidSymbol      ]}; // u U ù Ù " ¨

    // Letters, third row
    key <AB01> {[ z               , Z               , ae              , AE              , asciitilde      , dead_tilde      , VoidSymbol      , VoidSymbol      ]}; // z Z æ Æ ~ ~
    key <AB02> {[ x               , X               , ssharp          , U1E9E           , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // x X ß ẞ [
    key <AB03> {[ minus           , question        , emdash          , questiondown    , bracketright    , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // - ? — ¿ ]
    key <AB04> {[ v               , V               , ntilde          , Ntilde          , underscore      , endash          , VoidSymbol      , VoidSymbol      ]}; // v V ñ Ñ _ –
    key <AB05> {[ b               , B               , VoidSymbol      , VoidSymbol      , numbersign      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // b B     #
    key <AB06> {[ period          , colon           , ellipsis        , VoidSymbol      , bar             , brokenbar       , VoidSymbol      , VoidSymbol      ]}; // . : …   | ¦
    key <AB07> {[ h               , H               , VoidSymbol      , VoidSymbol      , exclam          , notsign         , VoidSymbol      , VoidSymbol      ]}; // h H     ! ¬
    key <AB08> {[ g               , G               , VoidSymbol      , VoidSymbol      , semicolon       , dead_cedilla    , VoidSymbol      , VoidSymbol      ]}; // g G     ; ¸
    key <AB09> {[ y               , Y               , VoidSymbol      , VoidSymbol      , colon           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // y Y     :
    key <AB10> {[ k               , K               , VoidSymbol      , VoidSymbol      , question        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // k K     ?

    // Pinky keys
    key <AE11> {[ slash           , underscore      , division        , endash          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // / _ ÷ –
    key <AE12> {[ equal           , plus            , notequal        , plusminus       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = + ≠ ±
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' "
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ less            , greater         , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // < >

    // Space bar
    key <SPCE> {[ space           , U202F           , U2019           , U2019           , space           , nobreakspace    , VoidSymbol      , VoidSymbol      ]}; //     ’ ’

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key:
    // this is the only way to have a multi-purpose dead key with XKB.
    // The real AltGr key is an ISO_Level5_Switch.
    include "level5(ralt_switch)"
};
